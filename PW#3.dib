#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"languageName":"csharp","name":"csharp"}]}}

#!markdown

# Практическая работа №1. Знакомство с потоками.

**Цель:** Познакомиться с возможностями класса System.Thread платформы .NET Framework.

**Результаты:** После выполнения работы Вы сможете:
1. Запускать длительные операции в отдельном потоке.
2. Завершать поток.
3. Дожидаться завершения выполнения потока. 


**Материалы для самостоятельного изучения**.
1. [Основы управления потоками](https://learn.microsoft.com/en-us/dotnet/standard/threading/managed-threading-basics)
2. [Использование потоков](https://learn.microsoft.com/en-us/dotnet/standard/threading/using-threads-and-threading)
3. [Примитив синхронизации Барьер](https://learn.microsoft.com/ru-ru/dotnet/standard/threading/barrier)
4. [Interlocked операции](https://learn.microsoft.com/en-us/dotnet/api/system.threading.interlocked?view=net-8.0)

## Задание.
Реализовать вычисление определенного интеграла методом трапеции в несколько потоков.

Отрезок, на котором происходит вычисление, разбивается на отрезки по количеству потоков. Для каждого отрезка значение 
интеграла считается в отдельном потоке, после завершения вычисоения полученный рельтаты суммирутся.

**Указание**.
1. Для суммирования результатов удобно воспользоваться разделяемой переменной, к которой будут прибалятся результаты вычисления прямо в самом потоке. Для синхронизации операций сложения лучше всего восользоваться [Interlocked операцией](https://learn.microsoft.com/en-us/dotnet/api/system.threading.interlocked?view=net-8.0).
2. Основная функция долна дождаться завершения всех потоков, которые вычисляют значение на отрезках, прежде чем возвратить результат. Для этого удобнее всего использовать Примитив синхронизации Барьер](https://learn.microsoft.com/ru-ru/dotnet/standard/threading/barrier).

#!csharp

using System;
using System.Threading;

//
// Вычисление определенного интеграла
//
class DefiniteIntegral
{

    public static double Solve(double a, double b, Func<double, double> function, double step, int threadsnumber)
    {
        Thread[] threads = new Thread[threadsnumber];
        double[] results = new double[threadsnumber];
        Barrier barrier = new Barrier(threadsnumber + 1, (b) =>
        {
            Console.WriteLine("All threads have reached the barrier.");
        });

        for (int i = 0; i < threadsnumber; i++)
        {
            int threadNumber = i;
            threads[i] = new Thread(() => ThreadMethod(ref results, barrier, threadNumber, a, b, function, step, threadsnumber));
            threads[i].Start();
        }

        barrier.SignalAndWait();

        foreach(double s in results){Console.Write($"{s} ");}
        Console.WriteLine($"\n{results.Sum()}");
        return(results.Sum());
        
        static void ThreadMethod(ref double[] results, Barrier barrier, int threadNumber, double a, double b, Func<double, double> f, double step, int threadsnumber)
        {
            Console.WriteLine($"Calculating from {a + threadNumber*(b-a)/threadsnumber} to {a + (threadNumber+1)*(b-a)/threadsnumber}");
            double A = a + threadNumber*(b-a)/threadsnumber;
            double B = a + (threadNumber+1)*(b-a)/threadsnumber;
            int n = (int)((B-A)/step);
            double result = (f(A)/2 + Enumerable.Range(1, n-1).Select((i)=> f(A+(i*step))).Sum() + f(B)/2)*step;
            results[threadNumber] = result;
            barrier.SignalAndWait();
        }
        
    }
}

#!csharp

#r "nuget: xunit, 2.8.1"

using Xunit;

var X = (double x) => x;
var SIN = (double x) => Math.Sin(x);

Assert.Equal(0, DefiniteIntegral.Solve(-1, 1, X, 1e-4, 2), 1e-4);

Assert.Equal(0, DefiniteIntegral.Solve(-1, 1, SIN, 1e-5, 8), 1e-4);

Assert.Equal(50, DefiniteIntegral.Solve(0, 10, X, 1e-6, 8), 1e-5);
